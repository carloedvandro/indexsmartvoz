import { useState, useRef, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Camera, RotateCcw } from "lucide-react";
import Tesseract from 'tesseract.js';

export const DocumentVerification = () => {
  const [status, setStatus] = useState("Aguardando libera√ß√£o da c√¢mera...");
  const [isProcessing, setIsProcessing] = useState(false);
  const [cameraActive, setCameraActive] = useState(false);
  const [cameraError, setCameraError] = useState<string | null>(null);
  const [cameraInitialized, setCameraInitialized] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const streamRef = useRef<MediaStream | null>(null);
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    // For√ßar limpeza completa antes de tentar inicializar
    const initCamera = async () => {
      console.log("üì± Iniciando limpeza completa de recursos de c√¢mera...");
      
      // Parar qualquer stream ativo primeiro
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
        streamRef.current = null;
      }
      
      // Limpar qualquer video element
      if (videoRef.current) {
        videoRef.current.srcObject = null;
      }
      
      // For√ßar libera√ß√£o de todos os recursos de m√≠dia
      await verificarELiberarCamera();
      
      // Aguardar antes de tentar inicializar
      console.log("‚è∞ Iniciando c√¢mera em 3 segundos...");
      setTimeout(() => {
        iniciarCamera();
      }, 3000);
    };

    initCamera();

    return () => {
      console.log("üßπ Limpando recursos na desmontagem do componente");
      if (streamRef.current) {
        streamRef.current.getTracks().forEach(track => track.stop());
        streamRef.current = null;
      }
      if (videoRef.current) {
        videoRef.current.srcObject = null;
      }
    };
  }, []);

  // Fun√ß√£o para verificar e liberar c√¢mera ocupada
  const verificarELiberarCamera = async (): Promise<boolean> => {
    try {
      console.log("üîç Verificando se h√° c√¢meras ativas...");
      
      // Tentar obter uma lista de todas as tracks ativas
      const devices = await navigator.mediaDevices.enumerateDevices();
      const videoDevices = devices.filter(device => device.kind === 'videoinput');
      
      // Tentar acessar brevemente cada c√¢mera para detectar se est√° ocupada
      for (const device of videoDevices) {
        try {
          console.log(`üé• Testando disponibilidade da c√¢mera: ${device.label || device.deviceId}`);
          const testStream = await navigator.mediaDevices.getUserMedia({
            video: { deviceId: device.deviceId },
            audio: false
          });
          
          // Se conseguiu acessar, liberar imediatamente
          testStream.getTracks().forEach(track => {
            console.log(`‚úÖ Liberando track da c√¢mera: ${device.label || device.deviceId}`);
            track.stop();
          });
        } catch (error: any) {
          if (error.name === 'NotReadableError') {
            console.log(`üîí C√¢mera ocupada detectada: ${device.label || device.deviceId}`);
          }
        }
      }
      
      // Aguardar um momento para garantir que todas as c√¢meras foram liberadas
      await new Promise(resolve => setTimeout(resolve, 2000));
      console.log("‚úÖ Processo de libera√ß√£o de c√¢meras conclu√≠do");
      return true;
    } catch (error) {
      console.warn("‚ö†Ô∏è Erro ao verificar c√¢meras:", error);
      return false;
    }
  };

  const iniciarCamera = async () => {
    try {
      setStatus("Verificando e liberando c√¢meras ocupadas...");
      setCameraError(null);
      setCameraInitialized(false);

      // Primeiro, verificar e liberar c√¢meras ocupadas
      await verificarELiberarCamera();

      // Parar stream anterior se existir
      if (streamRef.current) {
        console.log("üõë Parando stream anterior...");
        streamRef.current.getTracks().forEach(track => track.stop());
        streamRef.current = null;
        
        // Aguardar um pouco ap√≥s parar o stream anterior
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      setStatus("Verificando disponibilidade da c√¢mera...");

      // Verificar dispositivos dispon√≠veis primeiro
      console.log("üîç Verificando dispositivos de c√¢mera dispon√≠veis...");
      const devices = await navigator.mediaDevices.enumerateDevices();
      const videoDevices = devices.filter(device => device.kind === 'videoinput');
      console.log(`üì± ${videoDevices.length} dispositivos de v√≠deo encontrados:`, videoDevices);

      if (videoDevices.length === 0) {
        throw new Error("Nenhuma c√¢mera encontrada no dispositivo");
      }

      // Tentar diferentes configura√ß√µes de c√¢mera
      const cameraConfigs = [
        {
          video: {
            facingMode: "environment", // C√¢mera traseira preferida
            width: { ideal: 1280, max: 1920 },
            height: { ideal: 720, max: 1080 }
          },
          audio: false
        },
        {
          video: {
            width: { ideal: 1280 },
            height: { ideal: 720 }
          },
          audio: false
        },
        {
          video: true,
          audio: false
        }
      ];

      let stream: MediaStream | null = null;
      let lastError: Error | null = null;

      for (let i = 0; i < cameraConfigs.length; i++) {
        try {
          console.log(`üé• Tentativa ${i + 1}: Tentando acessar c√¢mera com config:`, cameraConfigs[i]);
          setStatus(`Inicializando c√¢mera (tentativa ${i + 1}/3)...`);
          
          stream = await navigator.mediaDevices.getUserMedia(cameraConfigs[i]);
          console.log(`‚úÖ C√¢mera acessada com sucesso na tentativa ${i + 1}`);
          break;
        } catch (error: any) {
          console.warn(`‚ùå Tentativa ${i + 1} falhou:`, error);
          lastError = error;
          
          // Aguardar entre tentativas
          if (i < cameraConfigs.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 1500));
          }
        }
      }

      if (!stream) {
        throw lastError || new Error("N√£o foi poss√≠vel acessar a c√¢mera");
      }

      streamRef.current = stream;

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        
        // Aguardar o v√≠deo carregar
        videoRef.current.onloadedmetadata = () => {
          console.log("‚úÖ V√≠deo carregado - c√¢mera pronta para uso");
          setCameraActive(true);
          setCameraInitialized(true);
          setStatus("Posicione o documento na √°rea vis√≠vel");
        };
        
        videoRef.current.onerror = (error) => {
          console.error("‚ùå Erro no elemento de v√≠deo:", error);
          setCameraError("Erro ao exibir v√≠deo da c√¢mera");
          setStatus("Erro no v√≠deo da c√¢mera");
        };
      }
    } catch (error: any) {
      console.error("‚ùå Erro ao acessar a c√¢mera:", error);
      setCameraActive(false);
      setCameraInitialized(false);
      
      let errorMessage = "Erro desconhecido";
      
      switch (error.name) {
        case "NotAllowedError":
          errorMessage = "Acesso √† c√¢mera negado. Permita o acesso e tente novamente.";
          break;
        case "NotFoundError":
          errorMessage = "C√¢mera n√£o encontrada. Verifique se h√° uma c√¢mera dispon√≠vel.";
          break;
        case "NotReadableError":
          errorMessage = "C√¢mera ocupada por outro aplicativo. Feche outros apps e tente novamente.";
          break;
        case "OverconstrainedError":
          errorMessage = "Configura√ß√£o de c√¢mera n√£o suportada.";
          break;
        default:
          errorMessage = `Erro de c√¢mera: ${error.message}`;
      }
      
      setCameraError(errorMessage);
      setStatus(errorMessage);
      
      toast({
        title: "Erro de C√¢mera",
        description: errorMessage,
        variant: "destructive"
      });
    }
  };

  const capturarEAnalisar = async () => {
    if (!videoRef.current || isProcessing || !cameraActive || !cameraInitialized) {
      toast({
        title: "C√¢mera n√£o dispon√≠vel",
        description: "Aguarde a c√¢mera carregar completamente ou tente novamente",
        variant: "destructive"
      });
      return;
    }

    setIsProcessing(true);
    setStatus("Capturando documento...");

    try {
      const canvas = document.createElement('canvas');
      canvas.width = videoRef.current.videoWidth;
      canvas.height = videoRef.current.videoHeight;
      const ctx = canvas.getContext('2d');
      
      if (!ctx) {
        throw new Error("N√£o foi poss√≠vel criar contexto do canvas");
      }

      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);
      const imagemData = canvas.toDataURL('image/png');

      // Salvar imagem do documento
      localStorage.setItem('documentoFrenteBase64', imagemData);
      setStatus("Processando OCR...");

      // Executar OCR
      const resultado = await Tesseract.recognize(imagemData, 'por', {
        logger: m => {
          if (m.status === 'recognizing text') {
            setStatus(`Processando OCR... ${Math.round(m.progress * 100)}%`);
          }
        }
      });

      const textoExtraido = resultado.data.text;
      console.log("Texto extra√≠do:", textoExtraido);

      // Salvar texto extra√≠do
      localStorage.setItem('documentoTextoExtraido', textoExtraido);
      setStatus("Comparando dados com a selfie e cadastro...");

      // Verificar se h√° selfie salva
      const selfie = localStorage.getItem('selfieBase64');

      // Dados de exemplo do cadastro
      const cadastro = {
        nome: "Jo√£o da Silva",
        cpf: "123.456.789-00",
        nascimento: "01/01/1990",
        mae: "Maria da Silva"
      };

      // Valida√ß√£o simples
      const nomeEncontrado = textoExtraido.includes("Jo√£o") || textoExtraido.includes("JO√ÉO");
      const cpfEncontrado = textoExtraido.includes("123") || textoExtraido.includes("456") || textoExtraido.includes("789");
      const maeEncontrada = textoExtraido.includes("Maria") || textoExtraido.includes("MARIA");
      const validacaoPassou = nomeEncontrado && cpfEncontrado && maeEncontrada;

      if (selfie && validacaoPassou) {
        setStatus("Documento validado com sucesso!");
        toast({
          title: "Valida√ß√£o Conclu√≠da",
          description: "Documento verificado com sucesso!"
        });
        setTimeout(() => {
          navigate('/client/verification-complete');
        }, 2000);
      } else {
        setStatus("Falha na valida√ß√£o. Dados n√£o conferem ou documento inv√°lido.");
        toast({
          title: "Valida√ß√£o Falhou",
          description: "Os dados do documento n√£o conferem com o cadastro",
          variant: "destructive"
        });
        setTimeout(() => {
          navigate('/client/verification-rejected');
        }, 2000);
      }
    } catch (error) {
      console.error("Erro durante an√°lise:", error);
      setStatus("Erro durante processamento. Tente novamente.");
      toast({
        title: "Erro de Processamento",
        description: "Erro durante an√°lise do documento",
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const tentarNovamente = async () => {
    console.log("üîÑ Tentando reinicializar c√¢mera...");
    setCameraActive(false);
    setCameraError(null);
    setCameraInitialized(false);
    
    // Aguardar um pouco antes de tentar novamente
    await new Promise(resolve => setTimeout(resolve, 1000));
    iniciarCamera();
  };

  return (
    <div className="min-h-screen bg-primary flex flex-col items-center justify-center p-4">
      {/* √Årea da c√¢mera */}
      <div className="w-[340px] h-[220px] border-4 border-gray-300 rounded-xl overflow-hidden relative bg-black">
        {cameraActive && cameraInitialized ? (
          <video 
            ref={videoRef} 
            autoPlay 
            muted 
            playsInline 
            className="w-full h-full object-cover" 
          />
        ) : (
          <div className="w-full h-full flex flex-col items-center justify-center">
            <Camera className="h-12 w-12 text-white/50 mb-2" />
            <p className="text-white/70 text-sm text-center px-2">
              {cameraError ? "C√¢mera indispon√≠vel" : "Carregando c√¢mera..."}
            </p>
          </div>
        )}
      </div>
      
      {/* Instru√ß√µes */}
      <div className="mt-3 text-lg text-white text-center">
        Posicione o documento na √°rea vis√≠vel
      </div>
      
      {/* Status */}
      <div className="text-white text-center mt-0.5 min-h-[24px] px-4">
        {status}
      </div>
      
      {/* Bot√µes */}
      <div className="flex flex-col gap-2 mt-[30px] w-full">
        <Button 
          onClick={capturarEAnalisar} 
          disabled={isProcessing || !cameraActive || !cameraInitialized}
          className="px-4 py-4 bg-transparent backdrop-blur-sm border border-white/30 shadow-lg text-white hover:bg-white/20"
        >
          {isProcessing ? "Processando..." : "Escanear documento"}
        </Button>
        
        {(cameraError || !cameraActive) && (
          <Button 
            onClick={tentarNovamente}
            variant="outline"
            className="px-4 py-2 bg-white/10 border border-white/30 text-white hover:bg-white/20"
          >
            <RotateCcw className="h-4 w-4 mr-2" />
            Tentar novamente
          </Button>
        )}
      </div>
    </div>
  );
};
