
import { supabase } from "@/integrations/supabase/client";
import { RegisterFormData } from "@/components/client/register/RegisterSchema";
import { log } from "@/utils/logging/userLogger";
import { isValidEmail } from "@/utils/validation/emailValidation";
import { isValidCPF } from "@/utils/validation/cpfValidation";

export const registerUserWithAddress = async (data: RegisterFormData) => {
  // Valida√ß√µes iniciais mais rigorosas
  if (!isValidEmail(data.email)) {
    throw new Error("Email inv√°lido");
  }
  if (!isValidCPF(data.cpf_cnpj)) {
    throw new Error("CPF inv√°lido");
  }
  if (!data.referred_code || data.referred_code.length < 3) {
    throw new Error("ID personalizado deve ter pelo menos 3 caracteres");
  }
  if (!data.full_name || data.full_name.trim().length < 2) {
    throw new Error("Nome completo √© obrigat√≥rio");
  }
  if (!data.phone || data.phone.length < 10) {
    throw new Error("WhatsApp √© obrigat√≥rio");
  }

  log("info", "Starting user registration via edge function", { 
    email: data.email, 
    customId: data.referred_code,
    hasSponsor: !!data.sponsor_Id
  });

  try {
    const payload = {
      email: data.email,
      password: data.password,
      full_name: data.full_name,
      cpf_cnpj: data.cpf_cnpj,
      phone: data.phone,
      birthDate: data.birthDate,
      person_type: "individual",
      referred_code: data.referred_code,
    };

    // Se tem patrocinador, buscar o ID do usu√°rio
    if (data.sponsor_Id) {
      console.log("üîç Buscando patrocinador:", data.sponsor_Id);
      const { data: sponsor, error: sponsorError } = await supabase
        .from('profiles')
        .select('id')
        .eq('referred_code', data.sponsor_Id)
        .single();

      if (sponsorError || !sponsor) {
        console.error("‚ùå Patrocinador n√£o encontrado:", sponsorError);
        throw new Error("ID do patrocinador n√£o encontrado. Verifique se o ID est√° correto.");
      }

      // Adicionar sponsor_id ao payload
      (payload as any).sponsor_id = sponsor.id;
      console.log("‚úÖ Patrocinador encontrado:", sponsor.id);
    }

    console.log("üöÄ Enviando dados para edge function criar-cliente:", {
      email: payload.email,
      referred_code: payload.referred_code,
      hasSponsor: !!(payload as any).sponsor_id
    });

    // Chamar a edge function criar-cliente
    const { data: result, error } = await supabase.functions.invoke('criar-cliente', {
      body: payload
    });

    console.log("üìã Resposta da edge function:", { result, error });

    // Verificar se houve erro na chamada da fun√ß√£o
    if (error) {
      console.error("üí• Erro na chamada da edge function:", error);
      
      // Tentar extrair mensagem de erro mais espec√≠fica
      let errorMessage = "Erro ao processar cadastro";
      
      if (error.message) {
        errorMessage = error.message;
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      // Melhorar mensagens de erro conhecidas
      if (errorMessage.includes('already registered') || errorMessage.includes('j√° est√° cadastrado')) {
        errorMessage = "Este email j√° possui uma conta. Fa√ßa login ou use a recupera√ß√£o de senha.";
      } else if (errorMessage.includes('Invalid email') || errorMessage.includes('email inv√°lido')) {
        errorMessage = "Email inv√°lido. Verifique o formato do email.";
      } else if (errorMessage.includes('CPF') && errorMessage.includes('j√° est√°')) {
        errorMessage = "Este CPF j√° est√° cadastrado no sistema.";
      } else if (errorMessage.includes('custom_id') && errorMessage.includes('j√° est√°')) {
        errorMessage = "Este ID personalizado j√° est√° em uso. Escolha outro ID.";
      }
      
      throw new Error(errorMessage);
    }

    // Verificar se a resposta indica sucesso
    if (!result || !result.success) {
      const errorMessage = result?.error || result?.message || "Erro desconhecido no cadastro";
      console.error("üí• Cadastro falhou:", errorMessage);
      
      // Melhorar mensagens de erro da edge function
      let friendlyError = errorMessage;
      
      if (errorMessage.includes('Email j√° est√° em uso')) {
        friendlyError = "Este email j√° possui uma conta. Fa√ßa login ou use a recupera√ß√£o de senha.";
      } else if (errorMessage.includes('CPF j√° est√° cadastrado')) {
        friendlyError = "Este CPF j√° est√° cadastrado no sistema.";
      } else if (errorMessage.includes('ID personalizado j√° est√° em uso')) {
        friendlyError = "Este ID personalizado j√° est√° em uso. Escolha outro ID.";
      } else if (errorMessage.includes('ID do patrocinador inv√°lido')) {
        friendlyError = "ID do patrocinador n√£o encontrado. Verifique se o ID est√° correto.";
      } else if (errorMessage.includes('dados obrigat√≥rios ausentes')) {
        friendlyError = "Alguns dados obrigat√≥rios est√£o ausentes. Verifique todos os campos.";
      } else if (errorMessage.includes('Configura√ß√£o do servidor incompleta')) {
        friendlyError = "Erro interno do servidor. Tente novamente em alguns minutos.";
      }
      
      throw new Error(friendlyError);
    }

    console.log("‚úÖ Cadastro realizado com sucesso via edge function:", result);

    // IMPORTANTE: Fazer login autom√°tico ap√≥s cadastro bem-sucedido
    console.log("üîê Fazendo login autom√°tico ap√≥s cadastro...");
    
    // Aguardar um momento para garantir que o usu√°rio foi criado completamente
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: data.email,
      password: data.password,
    });

    if (loginError) {
      console.error("üí• Erro no login autom√°tico:", loginError);
      log("error", "Auto-login failed after registration", loginError);
      
      // Se o erro for de credenciais inv√°lidas, pode ser que precise aguardar mais
      if (loginError.message.includes('Invalid login credentials')) {
        console.log("‚è≥ Tentando login novamente ap√≥s aguardar...");
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const { data: retryLoginData, error: retryLoginError } = await supabase.auth.signInWithPassword({
          email: data.email,
          password: data.password,
        });
        
        if (retryLoginError) {
          console.error("üí• Erro no segundo login autom√°tico:", retryLoginError);
          throw new Error("Cadastro realizado com sucesso! Fa√ßa login com suas credenciais.");
        }
        
        if (!retryLoginData.user) {
          throw new Error("Cadastro realizado com sucesso! Fa√ßa login com suas credenciais.");
        }
        
        console.log("‚úÖ Login autom√°tico realizado com sucesso na segunda tentativa:", retryLoginData.user.id);
        
        return {
          ...result,
          user: retryLoginData.user,
          session: retryLoginData.session
        };
      }
      
      // Mesmo com erro no login, o cadastro foi realizado
      throw new Error("Cadastro realizado com sucesso! Fa√ßa login com suas credenciais.");
    }

    if (!loginData.user) {
      console.error("üí• Login autom√°tico n√£o retornou usu√°rio");
      throw new Error("Cadastro realizado com sucesso! Fa√ßa login com suas credenciais.");
    }


    return {
      ...result,
      user: loginData.user,
      session: loginData.session
    };

  } catch (error: any) {
    log("error", "Error in registerUserWithAddress function", error);
    console.error("üí• Erro na transa√ß√£o de cadastro:", error);
    
    // N√£o alterar a mensagem se j√° for uma mensagem amig√°vel
    throw error;
  }
};
