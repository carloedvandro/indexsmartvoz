
import { useState, RefObject, useEffect, useCallback } from "react";
import Webcam from "react-webcam";
import { useToast } from "@/hooks/use-toast";
import { useCaptureValidation } from "./hooks/useCaptureValidation";
import { useCaptureProgress } from "./hooks/useCaptureProgress";
import { useFaceStability } from "./hooks/useFaceStability";
import { uploadFacialImage } from "./utils/imageUpload";
import { CAPTURE_CONFIG } from "./config/captureConfig";

interface UseFacialCaptureProps {
  webcamRef: RefObject<Webcam>;
  faceDetected: boolean;
  faceProximity: "ideal" | "too-close" | "too-far" | "not-detected";
  facePosition: { x: number; y: number; size: number };
  onComplete: (imageSrc: string) => void;
}

export const useFacialCapture = ({ 
  webcamRef, 
  faceDetected,
  faceProximity,
  facePosition,
  onComplete 
}: UseFacialCaptureProps) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [cameraActive, setCameraActive] = useState(true);
  const [lastValidationTime, setLastValidationTime] = useState(0);
  const { toast } = useToast();

  const {
    captureProgress,
    isCapturing,
    consecutiveValidFrames,
    captureStartTime,
    isComplete,
    startCapture,
    resetProgress,
    incrementProgress
  } = useCaptureProgress();

  const {
    validateCaptureConditions,
    shouldStartCapture,
    validateForCapture
  } = useCaptureValidation({
    faceDetected,
    faceProximity,
    isCapturing,
    captureStartTime,
    facePosition
  });

  const {
    isStable,
    checkStability,
    resetStability
  } = useFaceStability({
    facePosition,
    faceDetected,
    faceProximity
  });

  // VALIDA√á√ÉO CR√çTICA CONT√çNUA - Para imediatamente se condi√ß√µes forem perdidas
  useEffect(() => {
    if (!isCapturing) return;

    const now = Date.now();
    // Throttle valida√ß√µes para evitar spam
    if (now - lastValidationTime < 50) return;
    setLastValidationTime(now);

    // VERIFICA√á√ÉO RIGOROSA TRIPLA
    const validation = validateCaptureConditions();
    
    if (!validation.isValid) {
      console.log("üö® CONDI√á√ïES PERDIDAS - RESETANDO CAPTURA IMEDIATAMENTE");
      console.log("Detalhes:", { 
        faceDetected, 
        faceProximity, 
        facePosition,
        reason: validation.reason 
      });
      
      resetProgress();
      resetStability();
    }
  }, [faceDetected, faceProximity, facePosition, isCapturing, validateCaptureConditions, resetProgress, resetStability, lastValidationTime]);

  // Iniciar captura apenas quando condi√ß√µes ideais E est√°veis
  useEffect(() => {
    // Se j√° est√° processando, capturando ou c√¢mera inativa, n√£o iniciar
    if (isProcessing || isCapturing || !cameraActive) return;

    // Verificar estabilidade primeiro
    const stableNow = checkStability();

    // Condi√ß√µes RIGOROSAS para iniciar: detectado + ideal + est√°vel
    if (shouldStartCapture() && stableNow) {
      console.log("üü¢ INICIANDO CAPTURA - Todas as condi√ß√µes atendidas e est√°veis");
      startCapture();
      
      toast({
        title: "Captura Iniciada",
        description: "Mantenha o rosto na posi√ß√£o at√© 100%",
        duration: 2000,
      });
    }
  }, [faceDetected, faceProximity, facePosition, isProcessing, cameraActive, isCapturing, shouldStartCapture, checkStability, startCapture, toast]);

  // Sistema de valida√ß√£o cont√≠nua durante captura - MAIS RIGOROSO E LENTO
  useEffect(() => {
    if (!isCapturing) return;

    const validationInterval = setInterval(() => {
      // VALIDA√á√ÉO QU√ÅDRUPLA OBRIGAT√ìRIA: detectado + ideal + capturando + est√°vel
      const isValidFrame = validateForCapture() && isCapturing && checkStability();
      
      if (isValidFrame) {
        console.log(`‚úÖ Frame v√°lido e est√°vel ${consecutiveValidFrames + 1}/${CAPTURE_CONFIG.REQUIRED_CONSECUTIVE_FRAMES} - Progresso: ${((consecutiveValidFrames + 1) * CAPTURE_CONFIG.PROGRESS_INCREMENT).toFixed(1)}%`);
        incrementProgress();
      } else {
        // RESET IMEDIATO e FOR√áADO se perdeu condi√ß√µes
        console.log("‚ùå FRAME INV√ÅLIDO OU INST√ÅVEL - Parando captura IMEDIATAMENTE");
        console.log("Detalhes de falha:", { 
          faceDetected, 
          faceProximity, 
          facePosition,
          isStable,
          isCapturing,
          timestamp: Date.now()
        });
        
        // Parar interval e resetar
        clearInterval(validationInterval);
        resetProgress();
        resetStability();
      }
    }, CAPTURE_CONFIG.VALIDATION_INTERVAL);

    return () => clearInterval(validationInterval);
  }, [isCapturing, faceDetected, faceProximity, facePosition, isStable, validateForCapture, checkStability, incrementProgress, resetProgress, resetStability, consecutiveValidFrames]);

  // Processar captura quando atingir 100% - COM VALIDA√á√ÉO FINAL TRIPLA
  useEffect(() => {
    if (isComplete && isCapturing && !isProcessing) {
      console.log("üéØ CAPTURA 100% - Executando valida√ß√£o final rigorosa...");
      
      // VALIDA√á√ÉO FINAL CR√çTICA E TRIPLA antes de processar
      if (validateForCapture() && isStable) {
        console.log("‚úÖ VALIDA√á√ÉO FINAL TRIPLA APROVADA! Processando imagem...");
        handleSecureCapture();
      } else {
        console.log("‚ùå VALIDA√á√ÉO FINAL FALHOU - Resetando captura");
        resetProgress();
        resetStability();
        toast({
          title: "Erro na Captura",
          description: "Valida√ß√£o final falhou - Mantenha o rosto est√°vel",
          variant: "destructive",
        });
      }
    }
  }, [isComplete, isCapturing, isProcessing, validateForCapture, isStable]);

  async function handleSecureCapture() {
    if (isProcessing || !webcamRef.current) return;
    
    console.log("üì∏ Iniciando captura final segura e validada...");
    
    // VALIDA√á√ÉO FINAL QU√ÅDRUPLA antes de processar
    if (!validateForCapture() || !isStable || !isCapturing) {
      console.log("‚ùå VALIDA√á√ÉO PR√â-CAPTURA FALHOU - N√£o processando");
      resetProgress();
      resetStability();
      toast({
        title: "Erro na Captura",
        description: "Condi√ß√µes perdidas no momento final",
        variant: "destructive",
      });
      return;
    }
    
    const imageSrc = webcamRef.current.getScreenshot();
    if (!imageSrc) {
      console.error("‚ùå Erro ao capturar screenshot da webcam");
      resetProgress();
      resetStability();
      toast({
        title: "Erro na Captura",
        description: "Erro ao capturar imagem da c√¢mera",
        variant: "destructive",
      });
      return;
    }
    
    setIsProcessing(true);
    
    try {
      console.log("üíæ Enviando imagem validada para upload...");
      await uploadFacialImage(imageSrc);
      
      toast({
        title: "Captura Conclu√≠da",
        description: "Rosto capturado e validado com m√°xima seguran√ßa!",
      });
      
      // Reset completo
      resetProgress();
      resetStability();
      
      // Delay para melhor UX
      await new Promise(resolve => setTimeout(resolve, 1500));
      onComplete(imageSrc);
    } catch (error) {
      console.error('‚ùå Erro durante upload da imagem:', error);
      toast({
        title: "Erro no Upload",
        description: "Erro ao salvar imagem - Tente novamente",
        variant: "destructive",
      });
      resetProgress();
      resetStability();
    } finally {
      setIsProcessing(false);
    }
  }

  const toggleCamera = useCallback(() => {
    setCameraActive(prev => !prev);
    resetProgress();
    resetStability();
    toast({
      title: "C√¢mera",
      description: cameraActive ? "C√¢mera desativada" : "C√¢mera ativada",
    });
  }, [resetProgress, resetStability, toast, cameraActive]);

  return {
    isProcessing,
    cameraActive,
    captureProgress,
    isCapturing,
    isStable,
    toggleCamera
  };
};
